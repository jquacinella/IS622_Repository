V <- matrix(c(1.617,1,1,1,1,1,1,1,1,1), ncol=5);
M <- matrix(c(5.204, 2.617, 2.905, 2.617, 2.617, 3.6, 2, 2.178, 2, 2, 3.6, 2, 2.178, 2, 2, 3.6, 2, 2.178, 2, 2, 3.6, 2, 2.178, 2, 2), ncol=5)
P <- U %*% V;
max_j <- 5;
r <- 1;
s <- 1;
# Find the updated value by alculating the numerator and denominator
numerator <- sum(sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); }))
denominator <- sum(sapply(1:max_j, function(j) { V[s, j]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- update
U
max_j <- 5;
r <- 1;
s <- 1;
# Find the updated value by alculating the numerator and denominator
numerator <- sum(sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); }))
denominator <- sum(sapply(1:max_j, function(j) { V[s, j]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- update
U
U[r, s] <- numerator / denominator
U
# Starting off
U <- matrix(c(2.6, 1, 1.178, 1, 1, 1, 1, 1, 1, 1), ncol=2);
V <- matrix(c(1.617,1,1,1,1,1,1,1,1,1), ncol=5);
M <- matrix(c(5.204, 2.617, 2.905, 2.617, 2.617, 3.6, 2, 2.178, 2, 2, 3.6, 2, 2.178, 2, 2, 3.6, 2, 2.178, 2, 2, 3.6, 2, 2.178, 2, 2), ncol=5)
P <- U %*% V;
U
max_j <- 5;
r <- 1;
s <- 1;
# Find the updated value by alculating the numerator and denominator
numerator <- sum(sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); }))
denominator <- sum(sapply(1:max_j, function(j) { V[s, j]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- numerator / denominator
U
max_j <- 5;
r <- 5;
s <- 2;
# Find the updated value by alculating the numerator and denominator
numerator <- sum(sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); }))
denominator <- sum(sapply(1:max_j, function(j) { V[s, j]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- numerator / denominator
U
numerator / denominator
max_i <- 5;
r <- 2;
s <- 2;
# Find the updated value by alculating the numerator and denominator
numerator <- sum(sapply(1:max_i, function(i) { V[i, r] * (M[i, s] - sum(U[i, -c(r)] * V[-c(r), i])); }))
V
numerator <- sum(sapply(1:max_i, function(i) { V[i, r] * (M[i, s] - sum(U[i, -c(r)] * V[-c(r), i])); }))
i
Q
max_i <- 5;
r <- 2;
s <- 2;
# Find the updated value by alculating the numerator and denominator
numerator <- sum(sapply(1:max_i, function(i) { U[i, r] * (M[i, s] - sum(U[i, -c(r)] * U[-c(r), i])); }))
denominator <- sum(sapply(1:max_i, function(i) { U[i, r]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- numerator / denominator
U
max_i <- 5;
r <- 2;
s <- 2;
# Find the updated value by alculating the numerator and denominator
numerator <- sum(sapply(1:max_i, function(i) { U[i, r] * (M[i, s] - sum(U[i, -c(r)] * U[-c(r), i])); }))
denominator <- sum(sapply(1:max_i, function(i) { U[i, r]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- numerator / denominator
U
U
numerator <- sum(sapply(1:max_i, function(i) { U[i, r] * (M[i, s] - sum(U[i, -c(r)] * U[-c(r), i])); }))
numerator <- sum(sapply(1:max_i, function(i) { U[i, r] * (M[i, s] - sum(U[s, -c(r)] * U[-c(r), s])); }))
denominator <- sum(sapply(1:max_i, function(i) { U[i, r]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- numerator / denominator
U
d <- 2;
M <- matrix(c(5,2,4,4,3,3,1,2,4,1,2,NA,3,1,4,2,5,4,3,5,4,4,5,4,NA), ncol=5, byrow = TRUE);
sqrt(mean(M, na.rm = TRUE) / 2); # 1.276885
d <- 2;
M <- matrix(c(5,2,4,4,3,3,1,2,4,1,2,NA,3,1,4,2,5,4,3,5,4,4,5,4,NA), ncol=5, byrow = TRUE);
sqrt(mean(M, na.rm = TRUE) / 2); # 1.276885
# Starting off
U <- matrix(c(2.6, 1, 1.178, 1, 1, 1, 1, 1, 1, 1), ncol=2);
V <- matrix(c(1.617,1,1,1,1,1,1,1,1,1), ncol=5);
# Calculate P
P <- U %*% V;
# Show initital error
sqrt(sum((M - P)**2)); # 0.0002650962
# Starting off
U <- matrix(c(2.6, 1, 1.178, 1, 1, 1, 1, 1, 1, 1), ncol=2);
V <- matrix(c(1.617,1,1,1,1,1,1,1,1,1), ncol=5);
# Calculate P
P <- U %*% V;
# Show initital error
sqrt(sum((M - P)**2,  na.rm=TRUE)); # 0.0002650962
M
P
M - P
(M - P)**2
sum((M - P)**2, na.rm=2)
# Starting off
U <- matrix(c(2.6, 1, 1.178, 1, 1, 1, 1, 1, 1, 1), ncol=2);
V <- matrix(c(1.617,1,1,1,1,1,1,1,1,1), ncol=5);
# Calculate P
P <- U %*% V;
# Show initital error
sqrt(sum((M - P)**2,  na.rm=TRUE));
numerator <- sum(sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); }),  na.rm=TRUE)
denominator <- sum(sapply(1:max_j, function(j) { V[s, j]**2; }))
numerator
denominator
numerator / denominator
U
U[ ,r] * (M[ ,s] - U %*% V[ ,s])
sum(U[ ,r] * (M[ ,s] - U %*% V[ ,s]), na.rm=TRUE)
sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); })
sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); })
V[s, j]
j
M[r,j]
M
r
r <- 1;
s <- 1;
M[r,j]
V[s,j]
V
sum(U[r, -c(s)] * V[-c(s), j])
U[r, -c(s)]; V[-c(s), j]
U
# Starting off
U <- matrix(c(2.6, 1, 1.178, 1, 1, 1, 1, 1, 1, 1), ncol=2);
V <- matrix(c(1.617,1,1,1,1,1,1,1,1,1), ncol=5);
# Calculate P
P <- U %*% V;
# Show initital error
sqrt(sum((M - P)**2,  na.rm=TRUE));
max_j <- 5;
r <- 1;
s <- 1;
# Find the updated value by calculating the numerator and denominator
numerator <- sum(sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); }),  na.rm=TRUE)
denominator <- sum(sapply(1:max_j, function(j) { V[s, j]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- numerator / denominator
U
# Show sum of squared error
sqrt(sum((M - U %*% V)**2, na.rm=TRUE));
# Update P
P <- U %*% V;
max_j <- 5;
r <- 5;
s <- 2;
# Find the updated value by alculating the numerator and denominator
numerator <- sum(sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); }),  na.rm=TRUE)
denominator <- sum(sapply(1:max_j, function(j) { V[s, j]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- numerator / denominator
U
# Show sum of squared error
sqrt(sum((M - U %*% V)**2));
# Update P
P <- U %*% V;
# Starting off
U <- matrix(c(2.6, 1, 1.178, 1, 1, 1, 1, 1, 1, 1), ncol=2);
V <- matrix(c(1.617,1,1,1,1,1,1,1,1,1), ncol=5);
# Calculate P
P <- U %*% V;
# Show initital error
sqrt(sum((M - P)**2,  na.rm=TRUE));
max_j <- 5;
r <- 1;
s <- 1;
# Find the updated value by calculating the numerator and denominator
numerator <- sum(sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); }),  na.rm=TRUE)
denominator <- sum(sapply(1:max_j, function(j) { V[s, j]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- numerator / denominator
U
# Show sum of squared error
sqrt(sum((M - U %*% V)**2, na.rm=TRUE));
# Update P
P <- U %*% V;
max_j <- 5;
r <- 5;
s <- 2;
# Find the updated value by alculating the numerator and denominator
numerator <- sum(sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); }),  na.rm=TRUE)
denominator <- sum(sapply(1:max_j, function(j) { V[s, j]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- numerator / denominator
U
# Show sum of squared error
sqrt(sum((M - U %*% V)**2),  na.rm=TRUE);
# Update P
P <- U %*% V;
# Starting off
U <- matrix(c(2.6, 1, 1.178, 1, 1, 1, 1, 1, 1, 1), ncol=2);
V <- matrix(c(1.617,1,1,1,1,1,1,1,1,1), ncol=5);
# Calculate P
P <- U %*% V;
# Show initital error
sqrt(sum((M - P)**2,  na.rm=TRUE));
max_j <- 5;
r <- 1;
s <- 1;
# Find the updated value by calculating the numerator and denominator
numerator <- sum(sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); }),  na.rm=TRUE)
denominator <- sum(sapply(1:max_j, function(j) { V[s, j]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- numerator / denominator
U
# Show sum of squared error
sqrt(sum((M - U %*% V)**2, na.rm=TRUE));
# Update P
P <- U %*% V;
max_j <- 5;
r <- 5;
s <- 2;
# Find the updated value by alculating the numerator and denominator
numerator <- sum(sapply(1:max_j, function(j) { V[s, j] * (M[r, j] - sum(U[r, -c(s)] * V[-c(s), j])); }),  na.rm=TRUE)
denominator <- sum(sapply(1:max_j, function(j) { V[s, j]**2; }))
numerator
denominator
# Update and print U
U[r, s] <- numerator / denominator
U
# Show sum of squared error
sqrt(sum((M - U %*% V)**2, na.rm=TRUE));
# Update P
P <- U %*% V;
max_i <- 5;
r <- 2;
s <- 2;
# Find the updated value by alculating the numerator and denominator
numerator <- sum(sapply(1:max_i, function(i) { U[i, r] * (M[i, s] - sum(U[i, -c(r)] * V[-c(r), s])); }),  na.rm=TRUE)
denominator <- sum(sapply(1:max_i, function(i) { U[i, r]**2; }))
numerator
denominator
# Update and print U
V[r, s] <- numerator / denominator
V
# Show sum of squared error
sqrt(sum((M - U %*% V)**2, na.rm=TRUE));
# Update P
P <- U %*% V;
D = matrix(c(2,0,0,0,0,0,0,0,0,
0,3,0,0,0,0,0,0,0,
0,0,3,0,0,0,0,0,0,
0,0,0,3,0,0,0,0,0,
0,0,0,0,3,0,0,0,0,
0,0,0,0,0,2,0,0,0,
0,0,0,0,0,0,3,0,0,
0,0,0,0,0,0,0,3,0,
0,0,0,0,0,0,0,0,2), cols=9)
D = matrix(c(2,0,0,0,0,0,0,0,0,
0,3,0,0,0,0,0,0,0,
0,0,3,0,0,0,0,0,0,
0,0,0,3,0,0,0,0,0,
0,0,0,0,3,0,0,0,0,
0,0,0,0,0,2,0,0,0,
0,0,0,0,0,0,3,0,0,
0,0,0,0,0,0,0,3,0,
0,0,0,0,0,0,0,0,2), ncols=9)
D = matrix(c(2,0,0,0,0,0,0,0,0,
0,3,0,0,0,0,0,0,0,
0,0,3,0,0,0,0,0,0,
0,0,0,3,0,0,0,0,0,
0,0,0,0,3,0,0,0,0,
0,0,0,0,0,2,0,0,0,
0,0,0,0,0,0,3,0,0,
0,0,0,0,0,0,0,3,0,
0,0,0,0,0,0,0,0,2), ncol=9)
D
colnames<-c('A','B','C','D','E','F','G','H','I')
D
colnames(D)<-c('A','B','C','D','E','F','G','H','I')
D
rownames(D)<-c('A','B','C','D','E','F','G','H','I')
D
# Setup the degree matrix
D = matrix(c(2,0,0,0,0,0,0,0,0,
0,3,0,0,0,0,0,0,0,
0,0,3,0,0,0,0,0,0,
0,0,0,3,0,0,0,0,0,
0,0,0,0,3,0,0,0,0,
0,0,0,0,0,2,0,0,0,
0,0,0,0,0,0,3,0,0,
0,0,0,0,0,0,0,3,0,
0,0,0,0,0,0,0,0,2), ncol=9)
# Setup col and row names
colnames(D)<-c('A','B','C','D','E','F','G','H','I')
rownames(D)<-c('A','B','C','D','E','F','G','H','I')
# Write up the adjanceny matrix
#  A B C D E F G H I
A = matrix(c(0,1,1,0,0,0,0,0,0, # A
1,0,1,0,0,0,0,1,0, # B
1,1,0,1,0,0,0,0,0, # C
0,0,1,0,1,1,0,0,0, # D
0,0,0,1,0,1,1,0,0, # E
0,0,0,1,1,0,0,0,0, # F
0,0,0,0,1,0,0,1,1, # G
0,1,0,0,0,0,1,0,1, # H
0,0,0,0,0,0,1,1,0), ncol=9)
# Setup col and row names
colnames(A)<-c('A','B','C','D','E','F','G','H','I')
rownames(A)<-c('A','B','C','D','E','F','G','H','I')
# Calculate Laplacian
L = D - A
L
# Setup the degree matrix
D = matrix(c(2,0,0,0,0,0,0,0,0,
0,3,0,0,0,0,0,0,0,
0,0,3,0,0,0,0,0,0,
0,0,0,3,0,0,0,0,0,
0,0,0,0,3,0,0,0,0,
0,0,0,0,0,2,0,0,0,
0,0,0,0,0,0,3,0,0,
0,0,0,0,0,0,0,3,0,
0,0,0,0,0,0,0,0,2), ncol=9)
# Setup col and row names
colnames(D)<-c('A','B','C','D','E','F','G','H','I')
rownames(D)<-c('A','B','C','D','E','F','G','H','I')
# Write up the adjanceny matrix
#  A B C D E F G H I
A = matrix(c(0,1,1,0,0,0,0,0,0, # A
1,0,1,0,0,0,0,1,0, # B
1,1,0,1,0,0,0,0,0, # C
0,0,1,0,1,1,0,0,0, # D
0,0,0,1,0,1,1,0,0, # E
0,0,0,1,1,0,0,0,0, # F
0,0,0,0,1,0,0,1,1, # G
0,1,0,0,0,0,1,0,1, # H
0,0,0,0,0,0,1,1,0), ncol=9)
# Setup col and row names
colnames(A)<-c('A','B','C','D','E','F','G','H','I')
rownames(A)<-c('A','B','C','D','E','F','G','H','I')
# Calculate Laplacian
L = D - A
# Print results
D
A
L
clusterdata <- read.csv('data.csv')
setwd("Code/Masters/IS622/Week9/")
clusterdata <- read.csv('data.csv')
num_clusters <- 4;
library(stats)
model.kmeans.builtin <- kmeans(clusterdata, num_clusters)
model.kmeans.builtin$centers[order(model.kmeans.builtin$centers[,1]),]
library(jpg)
library(jpeg)
library(JPEG)
??jpeg
??readjpeg
??readjpg
library(png)
library(grid)
img <- readPNG("/home/james/Development/Masters/IS622/Week13/pica.jpg")
grid.raster(img)
library(png)
library(grid)
img <- readPNG("/home/james/Development/Masters/IS622/Week13/pica.png")
grid.raster(img)
library(jpeg)
library(jpeg)
install.packages("jpeg")
library(joeg)
library(grid)
img <- readJPEG("/home/james/Development/Masters/IS622/Week13/pica.png")
grid.raster(img)
require(jpeg)
library(jpeg)
library(grid)
img <- readJPEG("/home/james/Development/Masters/IS622/Week13/pica.png")
grid.raster(img)
library(jpeg)
library(grid)
img <- readJPEG("/home/james/Development/Masters/IS622/Week13/pica.jpg")
grid.raster(img)
M <- matrix(c(0, 0, 0, 4/15, 2/5,
0, 0, 0, 4/15, 0,
0, 0, 0, 4/15, 2/5,
2/5, 4/5, 2/5, 0, 0,
2/5, 0, 2/5, 0, 0), ncol=5, byrow = TRUE)
M <- matrix(c(0, 0, 0, 4/15, 2/5,
0, 0, 0, 4/15, 0,
0, 0, 0, 4/15, 2/5,
2/5, 4/5, 2/5, 0, 0,
2/5, 0, 2/5, 0, 0), ncol=5, byrow = TRUE)
beta <- 0.8
en <- c(1,0,0,0,0)
(1-beta)*en
t((1-beta)*en)
rep((1-beta)*en, 5)
matrx(rep((1-beta)*en, 5), ncol=5)
matrix(rep((1-beta)*en, 5), ncol=5)
M <- matrix(c(0, 0, 0, 4/15, 2/5,
0, 0, 0, 4/15, 0,
0, 0, 0, 4/15, 2/5,
2/5, 4/5, 2/5, 0, 0,
2/5, 0, 2/5, 0, 0), ncol=5, byrow = TRUE)
beta <- 0.8
en <- c(1,0,0,0,0)
Mnew <- M + matrix(rep((1-beta)*en, 5), ncol=5)
Mnew
M
M <- matrix(c(0, 0, 0, 4/15, 2/5,
0, 0, 0, 4/15, 0,
0, 0, 0, 4/15, 2/5,
2/5, 4/5, 2/5, 0, 0,
2/5, 0, 2/5, 0, 0), ncol=5, byrow = TRUE)
beta <- 0.8
en <- c(1,0,0,0,0)
Mnew <- M + matrix(rep((1-beta)*en, 5), ncol=5)
vn <- en
for i in 1:100 {
vn <- Mnew * vn;
}
vn
M <- matrix(c(0, 0, 0, 4/15, 2/5,
0, 0, 0, 4/15, 0,
0, 0, 0, 4/15, 2/5,
2/5, 4/5, 2/5, 0, 0,
2/5, 0, 2/5, 0, 0), ncol=5, byrow = TRUE)
beta <- 0.8
en <- c(1,0,0,0,0)
Mnew <- M + matrix(rep((1-beta)*en, 5), ncol=5)
vn <- en
for (i in 1:100) {
vn <- Mnew * vn;
}
vn
Mnew
en
vn
M <- matrix(c(0, 0, 0, 4/15, 2/5,
0, 0, 0, 4/15, 0,
0, 0, 0, 4/15, 2/5,
2/5, 4/5, 2/5, 0, 0,
2/5, 0, 2/5, 0, 0), ncol=5, byrow = TRUE)
beta <- 0.8
en <- c(1,0,0,0,0)
Mnew <- M + matrix(rep((1-beta)*en, 5), ncol=5)
vn <- en
for (i in 1:100) {
vn <- Mnew %*% vn;
}
vn
n_iters <- 100;
M <- matrix(c(0, 0, 0, 4/15, 2/5,
0, 0, 0, 4/15, 0,
0, 0, 0, 4/15, 2/5,
2/5, 4/5, 2/5, 0, 0,
2/5, 0, 2/5, 0, 0), ncol=5, byrow = TRUE);
beta <- 0.8;
en <- c(1,0,0,0,0);
Mnew <- M + matrix(rep((1-beta)*en, 5), ncol=5);
# Iterate 100 times
vn <- en;
for (i in 1:n_iters) {
vn <- Mnew %*% vn;
}
# Print final results, which matcth the book
vn
n_iters <- 100;
M <- matrix(c(0, 0, 0, 4/15, 2/5,
0, 0, 0, 4/15, 0,
0, 0, 0, 4/15, 2/5,
2/5, 4/5, 2/5, 0, 0,
2/5, 0, 2/5, 0, 0), ncol=5, byrow = TRUE);
beta <- 0.8;
en <- c(0,1,0,0,0);
Mnew <- M + matrix(rep((1-beta)*en, 5), ncol=5);
# Iterate 100 times
vn <- en;
for (i in 1:n_iters) {
vn <- Mnew %*% vn;
}
# Print final results, which matcth the book
vn
